diff --git a/mojo/edk/edk.gni b/mojo/edk/edk.gni
new file mode 100644
index 0000000..b5d93fe
--- /dev/null
+++ b/mojo/edk/edk.gni
@@ -0,0 +1,7 @@
+# Copyright 2015 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+declare_args() {
+  use_ports_for_mojo_edk = false
+}
diff --git a/mojo/edk/embedder/BUILD.gn b/mojo/edk/embedder/BUILD.gn
index e307ed1..9e61890 100644
--- a/mojo/edk/embedder/BUILD.gn
+++ b/mojo/edk/embedder/BUILD.gn
@@ -2,6 +2,8 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//mojo/edk/edk.gni")
+
 source_set("embedder") {
   # This isn't really a standalone target; it must be linked into the
   # mojo_system_impl component.
@@ -12,7 +14,6 @@ source_set("embedder") {
 
   sources = [
     "configuration.h",
-    "embedder.cc",
     "embedder.h",
     "embedder_internal.h",
     "entrypoints.cc",
@@ -21,7 +22,6 @@ source_set("embedder") {
     # TODO(vtl): It's a little unfortunate that these end up in the same
     # component as non-test-only code. In the static build, this code should
     # hopefully be dead-stripped.
-    "test_embedder.cc",
     "test_embedder.h",
   ]
 
@@ -41,6 +41,15 @@ source_set("embedder") {
   deps = [
     "//base",
   ]
+
+  if (use_ports_for_mojo_edk) {
+    deps += [ "//local/ports/mojo_embedder" ]
+  } else {
+    sources += [
+      "embedder.cc",
+      "test_embedder.cc",
+    ]
+  }
 }
 
 source_set("platform") {
@@ -51,6 +60,13 @@ source_set("platform") {
     "//mojo/edk/system",
   ]
 
+  if (use_ports_for_mojo_edk) {
+    visibility += [
+      "//local/ports/mojo_embedder",
+      "//local/ports/mojo_system"
+    ]
+  }
+
   sources = [
     "platform_channel_pair.cc",
     "platform_channel_pair.h",
@@ -101,6 +117,13 @@ source_set("delegates") {
     "//mojo/edk/system",
   ]
 
+  if (use_ports_for_mojo_edk) {
+    visibility += [
+      "//local/ports/mojo_embedder",
+      "//local/ports/mojo_system"
+    ]
+  }
+
   sources = [
     "process_delegate.h",
   ]
diff --git a/mojo/edk/embedder/embedder.h b/mojo/edk/embedder/embedder.h
index 3393258..65ffcce 100644
--- a/mojo/edk/embedder/embedder.h
+++ b/mojo/edk/embedder/embedder.h
@@ -121,6 +121,18 @@ MOJO_SYSTEM_IMPL_EXPORT void ShutdownIPCSupport();
 MOJO_SYSTEM_IMPL_EXPORT ScopedMessagePipeHandle
 CreateMessagePipe(ScopedPlatformHandle platform_handle);
 
+// Asynchronously creates a message pipe from an arbitrary token string. Safe
+// to call from any thread, but should only be called in the parent process.
+MOJO_SYSTEM_IMPL_EXPORT void CreateParentMessagePipe(
+    const std::string& token,
+    const base::Callback<void(ScopedMessagePipeHandle)>& callback);
+
+// Asynchronously creates a message pipe from an arbitrary token string. Safe
+// to call from any thread, but should only be called in a child process.
+MOJO_SYSTEM_IMPL_EXPORT void CreateChildMessagePipe(
+    const std::string& token,
+    const base::Callback<void(ScopedMessagePipeHandle)>& callback);
+
 }  // namespace edk
 }  // namespace mojo
 
diff --git a/mojo/edk/system/BUILD.gn b/mojo/edk/system/BUILD.gn
index cd58ff4..99c1504 100644
--- a/mojo/edk/system/BUILD.gn
+++ b/mojo/edk/system/BUILD.gn
@@ -2,6 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//mojo/edk/edk.gni")
 import("//testing/test.gni")
 import("../../../mojo/public/tools/bindings/mojom.gni")
 
@@ -25,64 +26,74 @@ static_library("system") {
   # TODO(use_chrome_edk): remove "2"
   output_name = "mojo_system_impl2"
 
-  sources = [
-    "async_waiter.cc",
-    "async_waiter.h",
-    "awakable.h",
-    "awakable_list.cc",
-    "awakable_list.h",
-    "broker.h",
-    "broker_messages.h",
-    "broker_state.cc",
-    "broker_state.h",
-    "child_broker.cc",
-    "child_broker.h",
-    "child_broker_host.cc",
-    "child_broker_host.h",
-    "configuration.cc",
-    "configuration.h",
-    "core.cc",
-    "core.h",
-    "data_pipe.cc",
-    "data_pipe.h",
-    "data_pipe_consumer_dispatcher.cc",
-    "data_pipe_consumer_dispatcher.h",
-    "data_pipe_producer_dispatcher.cc",
-    "data_pipe_producer_dispatcher.h",
-    "dispatcher.cc",
-    "dispatcher.h",
-    "handle_signals_state.h",
-    "handle_table.cc",
-    "handle_table.h",
-    "mapping_table.cc",
-    "mapping_table.h",
-    "message_in_transit.cc",
-    "message_in_transit.h",
-    "message_in_transit_queue.cc",
-    "message_in_transit_queue.h",
-    "message_pipe_dispatcher.cc",
-    "message_pipe_dispatcher.h",
-    "options_validation.h",
-    "platform_handle_dispatcher.cc",
-    "platform_handle_dispatcher.h",
-    "raw_channel.cc",
-    "raw_channel.h",
-    "raw_channel_posix.cc",
-    "raw_channel_win.cc",
-    "routed_raw_channel.cc",
-    "routed_raw_channel.h",
-    "shared_buffer_dispatcher.cc",
-    "shared_buffer_dispatcher.h",
-    "simple_dispatcher.cc",
-    "simple_dispatcher.h",
-    "transport_data.cc",
-    "transport_data.h",
-    "wait_set_dispatcher.cc",
-    "wait_set_dispatcher.h",
-    "waiter.cc",
-    "waiter.h",
+  deps = [
+    "//base",
+    "//base/third_party/dynamic_annotations",
   ]
 
+  if (use_ports_for_mojo_edk) {
+    deps += [ "//local/ports/mojo_system" ]
+    sources = [ "dummy.cc" ]
+  } else {
+    sources = [
+      "async_waiter.cc",
+      "async_waiter.h",
+      "awakable.h",
+      "awakable_list.cc",
+      "awakable_list.h",
+      "broker.h",
+      "broker_messages.h",
+      "broker_state.cc",
+      "broker_state.h",
+      "child_broker.cc",
+      "child_broker.h",
+      "child_broker_host.cc",
+      "child_broker_host.h",
+      "configuration.cc",
+      "configuration.h",
+      "core.cc",
+      "core.h",
+      "data_pipe.cc",
+      "data_pipe.h",
+      "data_pipe_consumer_dispatcher.cc",
+      "data_pipe_consumer_dispatcher.h",
+      "data_pipe_producer_dispatcher.cc",
+      "data_pipe_producer_dispatcher.h",
+      "dispatcher.cc",
+      "dispatcher.h",
+      "handle_signals_state.h",
+      "handle_table.cc",
+      "handle_table.h",
+      "mapping_table.cc",
+      "mapping_table.h",
+      "message_in_transit.cc",
+      "message_in_transit.h",
+      "message_in_transit_queue.cc",
+      "message_in_transit_queue.h",
+      "message_pipe_dispatcher.cc",
+      "message_pipe_dispatcher.h",
+      "options_validation.h",
+      "platform_handle_dispatcher.cc",
+      "platform_handle_dispatcher.h",
+      "raw_channel.cc",
+      "raw_channel.h",
+      "raw_channel_posix.cc",
+      "raw_channel_win.cc",
+      "routed_raw_channel.cc",
+      "routed_raw_channel.h",
+      "shared_buffer_dispatcher.cc",
+      "shared_buffer_dispatcher.h",
+      "simple_dispatcher.cc",
+      "simple_dispatcher.h",
+      "transport_data.cc",
+      "transport_data.h",
+      "wait_set_dispatcher.cc",
+      "wait_set_dispatcher.h",
+      "waiter.cc",
+      "waiter.h",
+    ]
+  }
+
   defines = [
     "MOJO_SYSTEM_IMPL_IMPLEMENTATION",
     "MOJO_SYSTEM_IMPLEMENTATION",
@@ -98,11 +109,6 @@ static_library("system") {
     "../embedder:platform",
   ]
 
-  deps = [
-    "//base",
-    "//base/third_party/dynamic_annotations",
-  ]
-
   if (is_win) {
     cflags = [ "/wd4324" ]  # Structure was padded due to __declspec(align()),
                             # which is uninteresting.
diff --git a/mojo/edk/system/dummy.cc b/mojo/edk/system/dummy.cc
new file mode 100644
index 0000000..6ea615d
--- /dev/null
+++ b/mojo/edk/system/dummy.cc
@@ -0,0 +1,6 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Nothing to see here. Just a file to compile so that the OSX build works.
+
